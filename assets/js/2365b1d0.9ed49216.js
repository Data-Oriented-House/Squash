"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[235],{15038:e=>{e.exports=JSON.parse('{"functions":[{"name":"Build","desc":"Sets up an internal constructor and destructor for a component. This is used to create and destroy components. If arguments are not provided, an empty table will be used instead.\\n\\nBoth the constructor and destructor are optional and can be omitted. If no constructor is specified, a default constructor that returns true is used. If no destructor is specified, a default destructor that does nothing is used.\\n\\n```lua\\nlocal World = Stew.World.Create()\\n\\nWorld.Component.Build(\\"Poisoned\\")\\n\\nWorld.Component.Build(\\"Health\\", {\\n\\tConstructor = function(Entity : any, Name : string, Max : number)\\n\\t\\treturn {\\n\\t\\t\\tCurrent = Max;\\n\\t\\t\\tMax = Max;\\n\\t\\t}\\n\\tend;\\n})\\n\\nWorld.Component.Build(\\"Model\\", {\\n\\tConstructor = function(Entity : any, Name : string, Model : Model, NewName : string)\\n\\t\\tlocal NewModel = Model:Clone()\\n\\t\\tNewModel.Name = NewName\\n\\t\\treturn NewModel\\n\\tend;\\n\\n\\tDestructor = function(Entity : any, Name : string)\\n\\t\\tStew.Component.Get(Entity, Name) :Destroy()\\n\\tend;\\n})\\n```\\n\\t","params":[{"name":"Name","desc":"The name of the component.","lua_type":"Name"},{"name":"ComponentArgs","desc":"The arguments to build the component","lua_type":"ComponentArgs?"}],"returns":[],"function_type":"static","errors":[{"lua_type":"Component Built Twice","desc":"A component with the given name has already been built."}],"source":{"line":456,"path":"src/init.lua"}},{"name":"Create","desc":"Creates a unique component associated with the entity and returns it. Automatically registers the entity if it hasn\'t been registered yet.\\n\\nIf the constructor returns void or nil, the component will not be created.\\n\\n```lua\\nlocal World = Stew.World.Create()\\n\\nWorld.Component.Build(\\"Model\\", {\\n\\tConstructor = function(Entity : any, Name : string, Model : Model, Allow : boolean)\\n\\t\\tif not Allow then return end\\n\\t\\treturn Model:Clone()\\n\\tend;\\n})\\n\\nlocal LocalPlayer : Player = Players.LocalPlayer\\nprint(World.Component.Get(LocalPlayer, \\"Model\\")) --\x3e nil\\n\\nWorld.Component.Create(LocalPlayer, \\"Model\\", workspace.CoolModel, false)\\nprint(World.Component.Get(LocalPlayer, \\"Model\\")) --\x3e nil\\n\\nWorld.Component.Create(LocalPlayer, \\"Model\\", workspace.CoolModel, true)\\nprint(World.Component.Get(LocalPlayer, \\"Model\\")) --\x3e CoolModel\\n```\\n\\t","params":[{"name":"Entity","desc":"The entity that accesses this component.","lua_type":"Entity"},{"name":"Name","desc":"The name of the component to be created.","lua_type":"Name"},{"name":"...","desc":"Any additional arguments.","lua_type":"any"}],"returns":[{"desc":"The component that was created.","lua_type":"Component?"}],"function_type":"static","errors":[{"lua_type":"Component Not Built","desc":"A component with the given name is not built."}],"source":{"line":508,"path":"src/init.lua"}},{"name":"Delete","desc":"Deletes the component associated with the passed entity.\\n\\nIf the destructor returns a truthy value, the component will not be deleted.\\n\\n```lua\\nlocal World = Stew.World.Create()\\n\\nWorld.Component.Build(\\"Model\\", {\\n\\tConstructor = function(Entity : any, Name : string, Model : Model)\\n\\t\\treturn Model:Clone()\\n\\tend;\\n\\n\\tDestructor = function(Entity : any, Name : string, Allow : boolean)\\n\\t\\tif not Allow then return true end\\n\\t\\tStew.Component.Get(Entity, Name) :Destroy()\\n\\tend;\\n})\\n\\nlocal Part : Part = Instance.new(\\"Part\\")\\n\\nWorld.Component.Create(Part, \\"Model\\", workspace.CoolModel)\\nprint(Stew.Component.Get(Part, \\"Model\\")) --\x3e CoolModel\\n\\nStew.Component.Delete(Part, \\"Model\\", false)\\nprint(Stew.Component.Get(Part, \\"Model\\")) --\x3e CoolModel\\n\\nStew.Component.Delete(Part, \\"Model\\", true)\\nprint(Stew.Component.Get(Part, \\"Model\\")) --\x3e nil\\n```\\n\\t","params":[{"name":"Entity","desc":"The entity to delete the component from.","lua_type":"Entity"},{"name":"Name","desc":"The name of the component to be deleted.","lua_type":"Name"},{"name":"...","desc":"Any additional arguments.","lua_type":"...any"}],"returns":[],"function_type":"static","errors":[{"lua_type":"Component Not Built","desc":"A component with the given name is not built."}],"source":{"line":576,"path":"src/init.lua"}},{"name":"Get","desc":"Gets a component from an entity.\\n\\n```lua\\nlocal World = Stew.World.Create()\\n\\nWorld.Component.Build(\\"Grid\\", {\\n\\tConstructor = function(Entity : any, Name : string, Properties: { Dimensions : Vector2; Default : number; })\\n\\t\\treturn {\\n\\t\\t\\tCells = table.create(Properties.Dimensions.X * Properties.Dimensions.Y, Properties.Default);\\n\\t\\t}\\n\\tend;\\n})\\n\\nlocal GridId = 1\\n\\nlocal Grid1 = Stew.Component.Get(GridId, \\"Grid\\")\\nprint(Grid1) --\x3e nil\\n\\nWorld.Component.Create(GridId, \\"Grid\\", Vector2.new(10, 10))\\n\\nlocal Grid2 = Stew.Component.Get(GridId, \\"Grid\\")\\nprint(Grid2) --\x3e CoolModel\\n```\\n\\t","params":[{"name":"Entity","desc":"","lua_type":"Entity"},{"name":"Name","desc":"","lua_type":"Name"}],"returns":[{"desc":"","lua_type":"Component?"}],"function_type":"static","source":{"line":633,"path":"src/init.lua"}},{"name":"GetAll","desc":"Returns a table of all an entity\'s components in the form of a dictionary. This dictionary is cloned to prevent tampering.\\n\\n```lua\\nlocal World = Stew.World.Create()\\n\\nWorld.Component.Build(\\"Red\\")\\nWorld.Component.Build(\\"Green\\")\\nWorld.Component.Build(\\"Blue\\", {\\n\\tConstructor = function(Entity : any, Name : string, Value : number)\\n\\t\\treturn Value\\n\\tend;\\n})\\n\\nlocal Entity = World.Entity.Create()\\n\\nWorld.Component.Create(Entity, \\"Red\\")\\nWorld.Component.Create(Entity, \\"Green\\")\\nWorld.Component.Create(Entity, \\"Blue\\", 5)\\n\\nfor Name: string, Component: any in Stew.Component.GetAll(Entity) do\\n\\tprint(Name, Component) --[[\\n\\t\\tRed true\\n\\t\\tGreen true\\n\\t\\tBlue 5\\n\\t]]\\nend\\n```\\n\\t","params":[{"name":"Entity","desc":"","lua_type":"Entity"}],"returns":[{"desc":"","lua_type":"{ [Name] : Component }"}],"function_type":"static","source":{"line":672,"path":"src/init.lua"}}],"properties":[],"types":[],"name":"Component","desc":"Contains methods for dealing with components.\\n\\t","source":{"line":415,"path":"src/init.lua"}}')}}]);