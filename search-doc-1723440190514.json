[{"title":"Why Squash?","type":0,"sectionRef":"#","url":"/Squash/docs/why","content":"","keywords":""},{"title":"Pragmatic Naming​","type":1,"pageTitle":"Why Squash?","url":"/Squash/docs/why#pragmatic-naming","content":"Squash has carefully designed its naming scheme to practically support automating serialization. This is achieved by supporting Squash[typeof(x)]().ser(y). Aside from the few compound types that require extra information, such as vectors, this pattern can be used to quickly read data and serialize it. "},{"title":"What Is SerDes?","type":0,"sectionRef":"#","url":"/Squash/docs/intro","content":"","keywords":""},{"title":"Why SerDes?​","type":1,"pageTitle":"What Is SerDes?","url":"/Squash/docs/intro#why-serdes","content":"SerDes is a way to minimize bandwidth and save space by reducing the size of data. It is to give the player a better experience. "},{"title":"Minimizing Latency​","type":1,"pageTitle":"What Is SerDes?","url":"/Squash/docs/intro#minimizing-latency","content":"In the world of distributed systems, we often need to send data over the network and receive it on the other end. The time that takes is proportional to how large the data is. The smaller the data, the less time it takes and the less latency we have, resulting in a better player experience. "},{"title":"Saving Space​","type":1,"pageTitle":"What Is SerDes?","url":"/Squash/docs/intro#saving-space","content":"In the world of persistent data storage, we often need to store data across servers in data banks, such as Roblox DataStores. The amount of space that takes up on disks is proportional to how large the data is. Smaller data means less required storage space, which means we can store more data and take less time to save and load it. "},{"title":"When SerDes?​","type":1,"pageTitle":"What Is SerDes?","url":"/Squash/docs/intro#when-serdes","content":"SerDes is used whenever we need to compress data in a way that we can fully retrieve the original version of it, such as when we need to send data over the network or store it in data banks. Common use cases include: AnimationsMovementPhysicsSaving / Loading "},{"title":"How To SerDes In Roblox?​","type":1,"pageTitle":"What Is SerDes?","url":"/Squash/docs/intro#how-to-serdes-in-roblox","content":""},{"title":"Buffers Are The Key​","type":1,"pageTitle":"What Is SerDes?","url":"/Squash/docs/intro#buffers-are-the-key","content":"The only three arbitrarily-sized datatypes in Luau are the string, buffer, and table datatypes. Tables can only be composed of primitive datatypes or other tables, and strings have both performance and memory overheads. Therefore if we need more control over the data we need to serialize, we should use buffers. With buffers, we have access to individual byte manipulation. "},{"title":"string","type":0,"sectionRef":"#","url":"/Squash/api/string","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"string","url":"/Squash/api/string#properties","content":" "},{"title":"binary​","type":1,"pageTitle":"string","url":"/Squash/api/string#binary","content":"&lt;/&gt; string.binary: string The alphabet '01'.  "},{"title":"octal​","type":1,"pageTitle":"string","url":"/Squash/api/string#octal","content":"&lt;/&gt; string.octal: string The alphabet '01234567'.  "},{"title":"decimal​","type":1,"pageTitle":"string","url":"/Squash/api/string#decimal","content":"&lt;/&gt; string.decimal: string The alphabet '0123456789'.  "},{"title":"duodecimal​","type":1,"pageTitle":"string","url":"/Squash/api/string#duodecimal","content":"&lt;/&gt; string.duodecimal: string The alphabet '0123456789AB'.  "},{"title":"hexadecimal​","type":1,"pageTitle":"string","url":"/Squash/api/string#hexadecimal","content":"&lt;/&gt; string.hexadecimal: string The alphabet '0123456789ABCDEF'.  "},{"title":"utf8​","type":1,"pageTitle":"string","url":"/Squash/api/string#utf8","content":"&lt;/&gt; string.utf8: string The alphabet of all 256 possible characters.  "},{"title":"lower​","type":1,"pageTitle":"string","url":"/Squash/api/string#lower","content":"&lt;/&gt; string.lower: string The alphabet 'abcdefghijklmnopqrstuvwxyz'.  "},{"title":"upper​","type":1,"pageTitle":"string","url":"/Squash/api/string#upper","content":"&lt;/&gt; string.upper: string The alphabet 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.  "},{"title":"letters​","type":1,"pageTitle":"string","url":"/Squash/api/string#letters","content":"&lt;/&gt; string.letters: string The alphabet lower .. upper.  "},{"title":"punctuation​","type":1,"pageTitle":"string","url":"/Squash/api/string#punctuation","content":"&lt;/&gt; string.punctuation: string The alphabet ' .,?!:;\\'&quot;-_'.  "},{"title":"english​","type":1,"pageTitle":"string","url":"/Squash/api/string#english","content":"&lt;/&gt; string.english: string The alphabet letters .. punctuation.  "},{"title":"filepath​","type":1,"pageTitle":"string","url":"/Squash/api/string#filepath","content":"&lt;/&gt; string.filepath: string The alphabet letters .. ':/'.  "},{"title":"datastore​","type":1,"pageTitle":"string","url":"/Squash/api/string#datastore","content":"&lt;/&gt; string.datastore: string The alphabet of every character that doesn't get expanded when JSON encoding. "},{"title":"Functions​","type":1,"pageTitle":"string","url":"/Squash/api/string#functions","content":" "},{"title":"convert​","type":1,"pageTitle":"string","url":"/Squash/api/string#convert","content":"&lt;/&gt; string.convert( str: string, inAlphabet: string, outAlphabet: string ) → string Converts a string, treated as a number in base inAlphabet, to a number in base toAlphabet.  "},{"title":"alphabet​","type":1,"pageTitle":"string","url":"/Squash/api/string#alphabet","content":"&lt;/&gt; string.alphabet(source: string) → string Returns the smallest sorted alphabet from a source string. "},{"title":"Packet Format And Insights","type":0,"sectionRef":"#","url":"/Squash/docs/binary","content":"","keywords":""},{"title":"How Are Packets Sent And Recieved?​","type":1,"pageTitle":"Packet Format And Insights","url":"/Squash/docs/binary#how-are-packets-sent-and-recieved","content":"Roblox remotes sends its data in the form of packets. Every roblox packet is packed densely with data to reduce their size. Every byte is important and has meaning. To verify this information for yourself, source code is available here and instructions on the hooking process are provided in this ZIP folder. After writing this documentation, we've discovered rbx-dom, a site dedicated to serialization and deserialization implementations. Sadly, it does not contain any information about remotes, but some information found in the other specifications has been very encouraging as they support our findings. "},{"title":"Variable Length Quantities​","type":1,"pageTitle":"Packet Format And Insights","url":"/Squash/docs/binary#variable-length-quantities","content":"Many of the values packets use can scale in size drastically, but still need to be kept as small as possible. There is a common format or strategy for doing this called Variable Length Quantities that only use as much space as they need to represent a number. This is used for the length of strings, the number of arguments in a remote call, and the number of remotes in a session. It is labeled with the acronym VLQ in parenthesis since it takes the place of a size. We know these are VLQs and not just regular numbers because we have tested them with numbers that are too big to fit in their initial size and looked at the binary; they scale in size as the number grows. "},{"title":"The Enigmas​","type":1,"pageTitle":"Packet Format And Insights","url":"/Squash/docs/binary#the-enigmas","content":"Even after literal days of looking at the binary, we still can't quite figure out some of the meanings behind some of the bytes. We have appropriately called these bytes &quot;Enigmas&quot;. Over time these enigma bytes have been reduced, but they aren't quite gone yet. If you would like to help identify these bytes, you may download the packet viewer, run the tests you need to, and make a pull request improving Squash's documentation! "},{"title":"Packet Structure​","type":1,"pageTitle":"Packet Format And Insights","url":"/Squash/docs/binary#packet-structure","content":"Packet Type 0×83 (byte)\tPacket Data 1\tPacket Data 2\t...\tPacket Delimiter 0×00 (byte) Every packet of Packet Type 0×83 ends with a Packet Delimiter 0×00 (null) byte, but not all packet types do this. "},{"title":"Single Remote Optimization Strategy​","type":1,"pageTitle":"Packet Format And Insights","url":"/Squash/docs/binary#single-remote-optimization-strategy","content":"When multiple packet datas are sent within a short enough time period using the same remote, they are merged into a single packet in the format above. This is why the packet delimiter is important; it says when to stop reading the packet. This is a strategy used to reduce packet overhead, such as the packet type, delimiter, and header necessary due to internet protocols. It is a strategy to use only one remote and funnel all data through it, appending all packet datas into a single packet. This is why we recommend using a single remote for all data, and not using multiple remotes for different kinds of data. "},{"title":"Packet Data Types​","type":1,"pageTitle":"Packet Format And Insights","url":"/Squash/docs/binary#packet-data-types","content":""},{"title":"Client To Server​","type":1,"pageTitle":"Packet Format And Insights","url":"/Squash/docs/binary#client-to-server","content":"Remote Event​ Packet Subtype 0×0701 (2 bytes)\tRemote Id (3 bytes)\tEnigma 0×000b (2 bytes)\tClient To Server Id 0×70 (byte)\tUser Information (5 bytes)\tArgument Count (byte)\tData 1\tData 2\t... When creating remotes in studio before starting a session, each remote gets an incrementing Remote Id starting from an unpredictable number. This number is 3 bytes long. When creating remotes in a session, each remote gets a Remote Id that increments at different rates, and starts from a different value. We are unsure of the format of the User Information, or what it actually contains. We hypothesize that it contains the player's UserId, but we have not been able to verify this. The maximum Argument Count is 255 because the argument count is a single byte. This happens to also align with the maximum number of arguments a function can have in Luau. There is no difference in size when firing remotes with different ids, or in short, the number of remotes does not affect the size of packets. Remote Function​ Packet Subtype 0×0701 (2 bytes)\tRemote Id (3 bytes)\tEnigma 0×000b (2 bytes)\tClient To Server Id 0×7b (byte)\tCall Count (VLQ = 2)\tUser Information (5 bytes)\tArgument Count (byte)\tData 1\tData 2\t... The Call Count is the number of times the remote function has been invoked since the start of the session. It increments by 2 every invocation, and is sent both ways from the Server -&gt; Client -&gt; Server or Client -&gt; Server -&gt; Client. We hypothesize that this is used to prevent duplicate packets from being processed, to prevent packets from being processed out of order, or to know if a packet was dropped. "},{"title":"Server To Client​","type":1,"pageTitle":"Packet Format And Insights","url":"/Squash/docs/binary#server-to-client","content":"Remote Event​ Packet Subtype 0×0701 (2 bytes)\tRemote Id (3 bytes)\tEnigma 0×000b (2 bytes)\tServer To Client Id 0×6f (byte)\tArgument Count (byte)\tData 1\tData 2\t... Remote Function​ Packet Subtype 0×0701 (2 bytes)\tRemote Id (3 bytes)\tEnigma 0×000b (2 bytes)\tServer To Client Id 0×79 (byte)\tCall Count (VLQ = 2)\tArgument Count (byte)\tData 1\tData 2\t... "},{"title":"Data​","type":1,"pageTitle":"Packet Format And Insights","url":"/Squash/docs/binary#data","content":"Below are the different ways types of data are formatted in memory when packed into remotes. "},{"title":"Void (Just Remote Overhead)​","type":1,"pageTitle":"Packet Format And Insights","url":"/Squash/docs/binary#void-just-remote-overhead","content":"Server -&gt; Client​ Remote Events​ Created\tRemote Name\tPacket Type\tPacket Subtype\tRemote Id\tEnigma\tServer To Client Id\tArgument Count\tPacket DelimiterBefore\t&quot;A&quot;\t0×83\t0×0701\t0×7f6d11\t0×000b\t0×6f\t0×00\t0×00 Before\t&quot;B&quot;\t0×83\t0×0701\t0×7d6d11\t0×000b\t0×6f\t0×00\t0×00 Before\t&quot;C&quot;\t0×83\t0×0701\t0×7e6d11\t0×000b\t0×6f\t0×00\t0×00 After\t&quot;D&quot;\t0×83\t0×0701\t0×430d19\t0×000b\t0×6f\t0×00\t0×00 After\t&quot;E&quot;\t0×83\t0×0701\t0×470d19\t0×000b\t0×6f\t0×00\t0×00 After\t&quot;F&quot;\t0×83\t0×0701\t0×4a0d19\t0×000b\t0×6f\t0×00\t0×00 Remote Functions​ Created\tRemote Name\tPacket Type\tPacket Subtype\tRemote Id\tEnigma\tServer To Client Id\tCall Count\tArgument Count\tPacket DelimiterBefore\t&quot;A&quot;\t0×83\t0×0701\t0×9ef104\t0×000b\t0×79\t0×02\t0×00\t0×00 Before\t&quot;B&quot;\t0×83\t0×0701\t0×9ff104\t0×000b\t0×79\t0×02\t0×00\t0×00 Before\t&quot;C&quot;\t0×83\t0×0701\t0×a0f104\t0×000b\t0×79\t0×02\t0×00\t0×00 After\t&quot;D&quot;\t0×83\t0×0701\t0×27f506\t0×000b\t0×79\t0×02\t0×00\t0×00 After\t&quot;E&quot;\t0×83\t0×0701\t0×2bf506\t0×000b\t0×79\t0×02\t0×00\t0×00 After\t&quot;F&quot;\t0×83\t0×0701\t0×2ef506\t0×000b\t0×79\t0×02\t0×00\t0×00 Client -&gt; Server​ Remote Events​ Created\tRemote Name\tPacket Type\tPacket Subtype\tRemote Id\tEnigma\tClient To Server Id\tUser Information\tArgument Count\tPacket DelimiterBefore\t&quot;A&quot;\t0×83\t0×0701\t0×6d9109\t0×000b\t0×70\t0×0159890a00\t0×00\t0×00 Before\t&quot;B&quot;\t0×83\t0×0701\t0×6b9109\t0×000b\t0×70\t0×0159890a00\t0×00\t0×00 Before\t&quot;C&quot;\t0×83\t0×0701\t0×6c9109\t0×000b\t0×70\t0×0159890a00\t0×00\t0×00 After\t&quot;D&quot;\t0×83\t0×0701\t0×67960b\t0×000b\t0×70\t0×0159890a00\t0×00\t0×00 After\t&quot;E&quot;\t0×83\t0×0701\t0×6b960b\t0×000b\t0×70\t0×0159890a00\t0×00\t0×00 After\t&quot;F&quot;\t0×83\t0×0701\t0×6e960b\t0×000b\t0×70\t0×0159890a00\t0×00\t0×00 Remote Functions​ Created\tRemote Name\tPacket Type\tPacket Subtype\tRemote Id\tEnigma\tClient To Server Id\tCall Count\tUser Information\tArgument Count\tPacket DelimiterBefore\t&quot;A&quot;\t0×83\t0×0701\t0×d9be07\t0×000b\t0×7b\t0×02\t0×01c5b60800\t0×00\t0×00 Before\t&quot;B&quot;\t0×83\t0×0701\t0×dabe07\t0×000b\t0×7b\t0×02\t0×01c5b60800\t0×00\t0×00 Before\t&quot;C&quot;\t0×83\t0×0701\t0×dbbe07\t0×000b\t0×7b\t0×02\t0×01c5b60800\t0×00\t0×00 After\t&quot;D&quot;\t0×83\t0×0701\t0×6fc309\t0×000b\t0×7b\t0×02\t0×01c5b60800\t0×00\t0×00 After\t&quot;E&quot;\t0×83\t0×0701\t0×73c309\t0×000b\t0×7b\t0×02\t0×01c5b60800\t0×00\t0×00 After\t&quot;F&quot;\t0×83\t0×0701\t0×76c309\t0×000b\t0×7b\t0×02\t0×01c5b60800\t0×00\t0×00 "},{"title":"Nil​","type":1,"pageTitle":"Packet Format And Insights","url":"/Squash/docs/binary#nil","content":"Type 0×01 (byte) (nil) 10×01 "},{"title":"Booleans​","type":1,"pageTitle":"Packet Format And Insights","url":"/Squash/docs/binary#booleans","content":"Type 0×09 (byte)\tValue (byte) (true) 9\ttrue0×09\t0×01 (false) 9\tfalse0×09\t0×00 (true, true) 9\ttrue\t9\ttrue0×09\t0×01\t0×09\t0×01 "},{"title":"Numbers (Double, F64)​","type":1,"pageTitle":"Packet Format And Insights","url":"/Squash/docs/binary#numbers-double-f64","content":"Type 0×0c (byte)\tValue (8 bytes) (-5) 12\t-50×0c\t0×c014000000000000 (5) 12\t50×0c\t0×4014000000000000 (0, 0) 12\t0\t12\t00×0c\t0×0000000000000000\t0×0c\t0×0000000000000000 "},{"title":"Strings​","type":1,"pageTitle":"Packet Format And Insights","url":"/Squash/docs/binary#strings","content":"Type 0×02 (byte)\tLength (VLQ = 1)\tValue (Length bytes) (&quot;Hello World!&quot;) 2\t12\t'H'\t'e'\t'l'\t'l'\t'o'\t' '\t'W'\t'o'\t'r'\t'l'\t'd'\t'!'0×02\t0×0c\t0×48\t0×65\t0×6c\t0×6c\t0×6f\t0×20\t0×57\t0×6f\t0×72\t0×6c\t0×64\t0×21 (&quot;swous&quot;, &quot;bibbity&quot;) 2\t5\t's'\t'w'\t'o'\t'u'\t's'\t2\t7\t'b'\t'i'\t'b'\t'b'\t'i'\t't'\t'y'0×02\t0×05\t0×73\t0×77\t0×6f\t0×75\t0×73\t0×02\t0×07\t0×62\t0×69\t0×62\t0×62\t0×69\t0×74\t0×79 "},{"title":"Vector2int16s​","type":1,"pageTitle":"Packet Format And Insights","url":"/Squash/docs/binary#vector2int16s","content":"Type 0×18 (byte)\tX (2 bytes)\tY (2 bytes) (Vector2int16.new()) 24\t0\t00×18\t0×0000\t0×0000 (Vector2int16.new(-5, 7)) 24\t-5\t70×18\t0xfffb\t0×0007 "},{"title":"Vector2s​","type":1,"pageTitle":"Packet Format And Insights","url":"/Squash/docs/binary#vector2s","content":"Type 0×15 (byte)\tX (4 bytes)\tY (4 bytes) (Vector2.zero) or (Vector2.new()) 21\t0\t00×15\t0×00000000\t0×00000000 (Vector2.new(5, -1)) 21\t5\t-10×15\t0×40a00000\t0×bf800000 "},{"title":"Vector3int16s​","type":1,"pageTitle":"Packet Format And Insights","url":"/Squash/docs/binary#vector3int16s","content":"Type 0×19 (byte)\tX (2 bytes)\tY (2 bytes)\tZ (2 bytes) (Vector3int16.new()) 25\t0\t0\t00×19\t0×0000\t0×0000\t0×0000 (Vector3int16.new(-5, 7, 9)) 25\t-5\t7\t90×19\t0xfffb\t0×0007\t0×0009 "},{"title":"Vector3s​","type":1,"pageTitle":"Packet Format And Insights","url":"/Squash/docs/binary#vector3s","content":"Type 0×16 (byte)\tX (4 bytes)\tY (4 bytes)\tZ (4 bytes) (Vector3.zero) or (Vector3.new()) 22\t0\t0\t00×16\t0×00000000\t0×00000000\t0×00000000 (Vector3.new(59.2, -1.101, 9.3)) 22\t59.2\t-1.101\t9.30×16\t0x426ccccd\t0xbf8ced91\t0x4114cccd "},{"title":"CFrames​","type":1,"pageTitle":"Packet Format And Insights","url":"/Squash/docs/binary#cframes","content":"General Case​ In the general case, CFrames have some arbitrary rotation that is not clean multiples of 90 degrees. This means that the rotation will not or cannot be enumerated, and therefore must be sent entirely. We do not understand the rotation format, but it is 6 bytes long, so forgive the elusive formatting we use. If you would like to help us figure out the rotation format, you may download the packet viewer, run the tests you need to, and make a pull request improving Squash's documentation! Type 0×1b (byte)\tX (4 bytes)\tY (4 bytes)\tZ (4 bytes)\tId 0×00 (byte)\tRotation (6 bytes) (CFrame.fromEulerAnglesYXZ(5, -1, 9)) 27\t0\t0\t0\t0\t5, -1, 90×1b\t0×00000000\t0×00000000\t0×00000000\t0×00\t0×54009391a6cc (CFrame.fromEulerAnglesYXZ(-1, 2, 3) + Vector3.new(-1, 2, -3)) 27\t-1\t2\t-3\t0\t-1, 2, 30×1b\t0×bf800000\t0×40000000\t0×c0400000\t0×00\t0×1c1d16b1de9e Special Case​ In the special case, CFrames have rotations that are clean multiples of 90 degrees. This means that the rotation can be enumerated, and so only the enum is sent, and the rotation is reconstructed on the other side. Type 0×1b (byte)\tX (4 bytes)\tY (4 bytes)\tZ (4 bytes)\tId (byte) (CFrame.identity) or (CFrame.new()) 27\t0\t0\t0\t20×1b\t0×00000000\t0×00000000\t0×00000000\t0×02 (CFrame.new(938, 0, -2)) or (CFrame.identity + Vector3.new(938, 0, -2)) 27\t938\t0\t-2\t20×1b\t0×446a80\t0×00000000\t0×c0000000\t0×02 Below are all of the different axis-angle representation of the rotation matrices that map to each rotation id. We do not know why there are holes in the Ids but have verified through exhaustive testing that these are the only Ids. Below are the orientations using EulerAnglesYXZ in degrees. These values are supported by Rojo's documentation of the RBXM file format. It has a slightly different format than packets, but these specific values are the same. Id\tX\tY\tZ0×02\t0\t0\t0 0×03\t90\t0\t0 0×05\t0\t180\t180 0×06\t-90\t0\t0 0×07\t0\t90\t90 0×09\t0\t90\t90 0×0a\t0\t0\t90 0×0c\t0\t-90\t90 0×0d\t-90\t-90\t0 0×0e\t0\t-90\t0 0×10\t90\t-90\t0 0×11\t0\t90\t180 0×14\t0\t180\t0 0×15\t-90\t-180\t0 0×17\t0\t0\t180 0×18\t90\t180\t0 0×19\t0\t0\t-90 0×1b\t0\t-90\t-90 0×1c\t0\t-180\t-90 0×1e\t0\t90\t-90 0×1f\t90\t90\t0 0×20\t0\t90\t0 0×22\t-90\t90\t0 0×23\t0\t-90\t180 "},{"title":"Tables​","type":1,"pageTitle":"Packet Format And Insights","url":"/Squash/docs/binary#tables","content":"Tables are separated into two types: Arrays and Dictionaries. This is because internally they use different types. This allows them to optimize how they read each case, at the cost of less flexibility of what the table can contain. Arrays may only have numerical indices, and must be contiguous. If you send an array with a hole, it will stop reading at the first hole. Dictionaries may only have string indices, and don't have an internal order; holes don't exist in dictionaries. Using any other kind of key will result in an error. Arrays​ Type 0×1e (byte)\tElement Count (VLQ = 1)\tElement 1\tElement 2\t... ({}) 30\t00×1e\t0×00 ({true}) 30\t1\t9\ttrue0×1e\t0×01\t0×09\t0×01 ({[1] = true, [3] = false}) The array is cut off at the first nil value. 30\t1\t9\ttrue0×1e\t0×01\t0×09\t0×01 ({&quot;sofa is &quot;, 8}) 30\t2\t2\t8\t's'\t'o'\t'f'\t'a'\t' '\t'i'\t's'\t' '\t12\t80×1e\t0×02\t0×02\t0×08\t0×73\t0×6f\t0×66\t0×61\t0×20\t0×69\t0×73\t0×20\t0×0c\t0×4020000000000000 Dictionaries​ Type 0×1f (byte)\tPair Count (VLQ)\tKey 1\tValue 1\tKey 2\tValue 2\t... ({sword = true}) 31\t1\t5\t's'\t'w'\t'o'\t'r'\t'd'\t9\ttrue0×1f\t0×01\t0×05\t0×73\t0×77\t0×6f\t0×72\t0×64\t0×09\t0×01 ({stamina = &quot;high&quot;, [&quot;health&quot;] = 82.1}) 31\t2\t7\t's'\t't'\t'a'\t'm'\t'i'\t'n'\t'a'\t2\t4\t'h'\t'e'\t'a'\t'l'\t't'\t'h'\t6\t'h'\t'e'\t'a'\t'l'\t't'\t'h'\t12\t82.10×1f\t0×02\t0×07\t0×73\t0×74\t0×61\t0×6d\t0×69\t0×6e\t0×61\t0×02\t0×04\t0×68\t0×65\t0×61\t0×6c\t0×74\t0×68\t0×06\t0×68\t0×65\t0×61\t0×6c\t0×74\t0×68\t0×0c\t0×4054866666666666 "},{"title":"Instances​","type":1,"pageTitle":"Packet Format And Insights","url":"/Squash/docs/binary#instances","content":"Instances seem to use an Id system which is shared across the client-server boundary. There isn't much we can say about them other than rbx-dom's mention of Referents. Type 0×1c (byte)\tInstance Id (5 bytes) (workspace) 28\t0×0190c80600 (game.ReplicatedStorage.Part) 28\t0×01546b0900 "},{"title":"Squash","type":0,"sectionRef":"#","url":"/Squash/api/Squash","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#types","content":" "},{"title":"Cursor​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#Cursor","content":"&lt;/&gt; interface Cursor { Buf: buffer Pos: number } An import of the Redblox Buffit Cursor type for better cross-library interaction  "},{"title":"SerDes​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#SerDes","content":"&lt;/&gt; interface SerDes { ser: ( Cursor, T... ) → () des: (Cursor) → T... }  "},{"title":"Functions​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#functions","content":" "},{"title":"print​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#print","content":"&lt;/&gt; Squash.print(cursor: Cursor) → () Pretty prints a Cursor record.  "},{"title":"cursor​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#cursor","content":"&lt;/&gt; Squash.cursor( size: number?, position: number? ) → Cursor   "},{"title":"frombuffer​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#frombuffer","content":"&lt;/&gt; Squash.frombuffer(buf: buffer) → Cursor   "},{"title":"tobuffer​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#tobuffer","content":"&lt;/&gt; Squash.tobuffer(cursor: Cursor) → buffer   "},{"title":"T​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#T","content":"&lt;/&gt; Squash.T(x: SerDes&lt;T&gt;) → T   "},{"title":"boolean​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#boolean","content":"&lt;/&gt; Squash.boolean() → { ser: ( Cursor, boolean, boolean?, boolean?, boolean?, boolean?, boolean?, boolean?, boolean? ) → (), des: (Cursor) → ( boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean ) }   "},{"title":"uint​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#uint","content":"&lt;/&gt; Squash.uint(bytes: number) → SerDes&lt;number&gt; Accuracy diminishes using 7 or 8 bytes.  "},{"title":"int​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#int","content":"&lt;/&gt; Squash.int(bytes: number) → SerDes&lt;number&gt; Accuracy diminishes using 7 or 8 bytes.  "},{"title":"number​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#number","content":"&lt;/&gt; Squash.number(bytes: number) → SerDes&lt;number&gt; Only supports 4 or 8 bytes.  "},{"title":"string​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#string","content":"&lt;/&gt; Squash.string(length: number?) → SerDes&lt;string&gt;   "},{"title":"buffer​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#buffer","content":"&lt;/&gt; Squash.buffer(length: number?) → SerDes&lt;buffer&gt;   "},{"title":"vlq​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#vlq","content":"&lt;/&gt; Squash.vlq() → SerDes&lt;number&gt;   "},{"title":"opt​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#opt","content":"&lt;/&gt; Squash.opt(serdes: SerDes&lt;T&gt;) → SerDes&lt;T?&gt;   "},{"title":"array​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#array","content":"&lt;/&gt; Squash.array( serdes: SerDes&lt;T&gt;, length: number? ) → SerDes&lt;{T}&gt;   "},{"title":"tuple​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#tuple","content":"&lt;/&gt; Squash.tuple(...: T...) → SerDes&lt;T...&gt;   "},{"title":"record​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#record","content":"&lt;/&gt; Squash.record(schema: T) → SerDes&lt;T&gt;   "},{"title":"map​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#map","content":"&lt;/&gt; Squash.map( keySerDes: SerDes&lt;K&gt;, valueSerDes: SerDes&lt;V&gt; ) → SerDes&lt;{[K]: V}&gt;   "},{"title":"literal​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#literal","content":"&lt;/&gt; Squash.literal(literals: ...any) → SerDes&lt;any&gt;   "},{"title":"table​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#table","content":"&lt;/&gt; Squash.table(schema: {[string]: SerDes&lt;any&gt;}) → SerDes&lt;any&gt; Serializes tables given a schema mapping types to serializers. If a type is not defined in the schema, it will be ignored when serializing tables.This is an expensive and heavy serializer compared to Record, Map, and Array. It is highly recommended that you do not use this for tables you know the type of already.  "},{"title":"Axes​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#Axes","content":"&lt;/&gt; Squash.Axes() → SerDes&lt;Axes &gt;   "},{"title":"BrickColor​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#BrickColor","content":"&lt;/&gt; Squash.BrickColor() → SerDes&lt;BrickColor &gt;   "},{"title":"EnumItem​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#EnumItem","content":"&lt;/&gt; Squash.EnumItem(enum: Enum ) → SerDes&lt;EnumItem &gt;   "},{"title":"CatalogueSearchParams​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#CatalogueSearchParams","content":"&lt;/&gt; Squash.CatalogueSearchParams() → SerDes&lt;CatalogSearchParams&gt;   "},{"title":"CFrame​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#CFrame","content":"&lt;/&gt; Squash.CFrame(positionSerDes: SerDes&lt;number&gt;) → SerDes&lt;CFrame &gt;   "},{"title":"Color3​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#Color3","content":"&lt;/&gt; Squash.Color3() → SerDes&lt;Color3 &gt;   "},{"title":"ColorSequenceKeypoint​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#ColorSequenceKeypoint","content":"&lt;/&gt; Squash.ColorSequenceKeypoint() → SerDes&lt;ColorSequenceKeypoint &gt;   "},{"title":"ColorSequence​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#ColorSequence","content":"&lt;/&gt; Squash.ColorSequence() → SerDes&lt;ColorSequence &gt;   "},{"title":"DateTime​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#DateTime","content":"&lt;/&gt; Squash.DateTime() → SerDes&lt;DateTime&gt;   "},{"title":"Faces​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#Faces","content":"&lt;/&gt; Squash.Faces() → SerDes&lt;Faces &gt;   "},{"title":"FloatCurveKey​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#FloatCurveKey","content":"&lt;/&gt; Squash.FloatCurveKey() → SerDes&lt;FloatCurveKey&gt;   "},{"title":"Font​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#Font","content":"&lt;/&gt; Squash.Font() → SerDes&lt;Font &gt;   "},{"title":"NumberRange​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#NumberRange","content":"&lt;/&gt; Squash.NumberRange(serdes: SerDes&lt;number&gt;) → SerDes&lt;NumberRange &gt;   "},{"title":"NumberSequenceKeypoint​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#NumberSequenceKeypoint","content":"&lt;/&gt; Squash.NumberSequenceKeypoint(serdes: SerDes&lt;number&gt;) → SerDes&lt;NumberSequenceKeypoint &gt;   "},{"title":"NumberSequence​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#NumberSequence","content":"&lt;/&gt; Squash.NumberSequence(serdes: SerDes&lt;number&gt;) → SerDes&lt;NumberSequence &gt;   "},{"title":"OverlapParams​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#OverlapParams","content":"&lt;/&gt; Squash.OverlapParams() → SerDes&lt;OverlapParams&gt;   "},{"title":"RaycastParams​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#RaycastParams","content":"&lt;/&gt; Squash.RaycastParams() → SerDes&lt;RaycastParams&gt;   "},{"title":"Vector3​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#Vector3","content":"&lt;/&gt; Squash.Vector3(serdes: SerDes&lt;number&gt;) → SerDes&lt;Vector3 &gt;   "},{"title":"PathWaypoint​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#PathWaypoint","content":"&lt;/&gt; Squash.PathWaypoint(serdes: SerDes&lt;number&gt;) → SerDes&lt;PathWaypoint &gt;   "},{"title":"PhysicalProperties​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#PhysicalProperties","content":"&lt;/&gt; Squash.PhysicalProperties() → SerDes&lt;PhysicalProperties &gt;   "},{"title":"Ray​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#Ray","content":"&lt;/&gt; Squash.Ray(serdes: SerDes&lt;number&gt;) → SerDes&lt;Ray &gt;   "},{"title":"RaycastResult​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#RaycastResult","content":"&lt;/&gt; Squash.RaycastResult(serdes: SerDes&lt;number&gt;) → SerDes&lt;SquashRaycastResult&gt; "},{"title":"Types","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash##","content":""},{"title":"​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#SquashRaycastResult","content":"interface SquashRaycastResult { Distance: number, Position: Vector3 Normal: Vector3 Material: Enum.Material }  Returns a SquashRaycastResult because Roblox does not allow instantiating RaycastResults.  "},{"title":"Vector2​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#Vector2","content":"&lt;/&gt; Squash.Vector2(serdes: SerDes&lt;number&gt;) → SerDes&lt;Vector2 &gt;   "},{"title":"Rect​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#Rect","content":"&lt;/&gt; Squash.Rect(serdes: SerDes&lt;number&gt;) → SerDes&lt;Rect &gt;   "},{"title":"Region3​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#Region3","content":"&lt;/&gt; Squash.Region3(serdes: SerDes&lt;number&gt;) → SerDes&lt;Region3 &gt;   "},{"title":"Region3int16​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#Region3int16","content":"&lt;/&gt; Squash.Region3int16() → SerDes&lt;Region3int16 &gt;   "},{"title":"RotationCurveKey​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#RotationCurveKey","content":"&lt;/&gt; Squash.RotationCurveKey(positionSerDes: SerDes&lt;number&gt;) → SerDes&lt;RotationCurveKey&gt;   "},{"title":"TweenInfo​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#TweenInfo","content":"&lt;/&gt; Squash.TweenInfo() → SerDes&lt;TweenInfo &gt;   "},{"title":"UDim​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#UDim","content":"&lt;/&gt; Squash.UDim(serdes: SerDes&lt;number&gt;) → SerDes&lt;UDim &gt;   "},{"title":"UDim2​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#UDim2","content":"&lt;/&gt; Squash.UDim2(serdes: SerDes&lt;number&gt;) → SerDes&lt;UDim2 &gt;   "},{"title":"Vector2int16​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#Vector2int16","content":"&lt;/&gt; Squash.Vector2int16() → SerDes&lt;Vector2int16 &gt;   "},{"title":"Vector3int16​","type":1,"pageTitle":"Squash","url":"/Squash/api/Squash#Vector3int16","content":"&lt;/&gt; Squash.Vector3int16() → SerDes&lt;Vector3int16 &gt;  "},{"title":"How To Serialize?","type":0,"sectionRef":"#","url":"/Squash/docs/how","content":"","keywords":""},{"title":"Cursors​","type":1,"pageTitle":"How To Serialize?","url":"/Squash/docs/how#cursors","content":"Buffers themselves are statically sized, which means that when a buffer is created it cannot be resized to fit more data. Squash uses something called a Cursor which wraps around buffers to treat them like dynamically sized stacks. This means users push and pop data off of the stack, and if it grows too big the buffer gets reallocated behind the scenes. Every serializer expects a cursor to push and pop from when serializing and deserializing. For more information, the internally used cursors have been extracted into a dedicated library called Cursor. A fun consequence of using a stack is that multiple independent serializations are allowed on the same cursor in succession. This makes fine-tuned serdes a breeze, since a user can serialize a number, then a string, then an array of vectors, and it just works! "},{"title":"Booleans​","type":1,"pageTitle":"How To Serialize?","url":"/Squash/docs/how#booleans","content":"In Luau, the boolean type is 1 byte large, but only 1 bit is actually necessary to store the contents of a boolean. This means we can actually serialize not just 1, but 8 booleans in a single byte. This is a common strategy called bit-packing to implement bit-fields. Happy\tConfused\tIrritated\tConcerned\tAngry\tHumber\tDazed\tNage1\t1\t0\t1\t0\t1\t1\t0 All of this information fits inside a single byte! We can use this to serialize 8 booleans in a single byte. local cursor = Squash.cursor() Squash.boolean().ser(cursor, true) Squash.print(cursor) -- Pos: 1 / 8 -- Buf: { 1 0 0 0 0 0 0 0 } -- ^ print(Squash.boolean().des(cursor)) -- true false false false false false false false  local cursor = Squash.cursor(3) Squash.boolean().ser(cursor, true, false, true, false, true, true, false, true) Squash.print(cursor) --- Pos: 1 / 3 --- Buf: { 181 0 0 } --- ^ print(Squash.boolean().des(cursor)) -- true false true false true true false true  "},{"title":"Numbers​","type":1,"pageTitle":"How To Serialize?","url":"/Squash/docs/how#numbers","content":"In Luau, the number type is 8 bytes large, but only 52 of the bits are dedicated to storing the contents of the number. This means there is no need to serialize more than 7 bytes for any kind of integer. "},{"title":"Unsigned Integers​","type":1,"pageTitle":"How To Serialize?","url":"/Squash/docs/how#unsigned-integers","content":"Unsigned integers are whole numbers that can be serialized using 1 to 8 bytes. N = { 0, 1, 2, 3, 4, 5, . . . } They may only be positive and can represent all possible permutations of their bits. These are the easiest to wrap our heads around and manipulate. They are often used to implement Fixed Point numbers by multiplying by some scale factor and shifting by some offset, then doing the reverse when deserializing. Bytes\tRange\tMin\tMax1\t{ 0, 1, 2, 3, . . . , 253, 254, 255 }\t0\t255 2\t{ 0, 1, 2, 3, . . . , 65,534, 65,535 }\t0\t65,535 3\t{ 0, 1, 2, 3, . . . , 16,777,214, 16,777,215 }\t0\t16,777,215 . . .\t. . .\t. . .\t. . . n\t{ 0, 1, 2, 3, . . . , 2^(8n) - 2, 2^(8n) - 1 }\t0\t2^(8n) - 1 WARNING: Using 7 or 8 bytes puts uints outside the 52 bit range of representation, leading to inaccurate results. local cursor = Squash.cursor() Squash.uint(1).ser(cursor, 243) Squash.print(cursor) -- Pos: 1 / 8 -- Buf: { 243 0 0 0 0 0 0 0 } -- ^ print(Squash.uint(1).des(cursor)) -- 243  local cursor = Squash.cursor(1) Squash.uint(1).ser(cursor, -13) Squash.print(cursor) -- Pos: 1 / 1 -- Buf: { 243 } -- ^ print(Squash.uint(1).des(cursor)) -- 243  local cursor = Squash.cursor(4, 1) Squash.uint(2).ser(cursor, 7365) Squash.print(cursor) -- Pos: 3 / 4 -- Buf: { 0 197 28 0 } -- ^ print(Squash.uint(2).des(cursor)) -- 7365  "},{"title":"Signed Integers​","type":1,"pageTitle":"How To Serialize?","url":"/Squash/docs/how#signed-integers","content":"Signed Integers are Integers that can be serialized with 1 through 8 bytes: Z = { ..., -2, -1, 0, 1, 2, 3, ... } They use 2's Compliment to represent negative numbers. The first bit is called the sign bit and the rest of the bits are called the magnitude bits. The sign bit is 0 for positive numbers and 1 for negative numbers. This implies the range of signed integers is one power of two smaller than the range of unsigned integers with the same number of bits, because the sign bit is not included in the magnitude bits. Bytes\tRange\tMin\tMax1\t{ -128, -127, . . . , 126, 127 }\t-128\t127 2\t{ -32,768, -32,767, . . . , 32,766, 32,767 }\t-32,768\t32,767 3\t{ -8,388,608, -8,388,607, . . . , 8,388,606, 8,388,607 }\t-8,388,608\t8,388,607 . . .\t. . .\t. . .\t. . . n\t{ -2^(8n - 1), -2^(8n - 1) + 1, . . . , 2^(8n - 1) - 2, 2^(8n - 1) - 1 }\t-2^(8n - 1)\t2^(8n - 1) - 1 WARNING: Using 7 or 8 bytes puts ints outside the 52 bit range of representation, leading to inaccurate results. local cursor = Squash.cursor() Squash.int(1).ser(cursor, 127) Squash.print(cursor) -- Pos: 1 / 8 -- Buf: { 127 0 0 0 0 0 0 0 } -- ^ print(Squash.int(1).des(cursor)) -- 127  local cursor = Squash.cursor() Squash.int(1).ser(cursor, -127) Squash.print(cursor) -- Pos: 1 / 8 -- Buf: { 129 0 0 0 0 0 0 0 } -- ^ print(Squash.int(1).des(cursor)) -- -127  local cursor = Squash.cursor() Squash.int(1).ser(cursor, 128) Squash.print(cursor) -- Pos: 1 / 8 -- Buf: { 128 0 0 0 0 0 0 0 } -- ^ print(Squash.int(1).des(cursor)) -- -128  local cursor = Squash.cursor() Squash.int(1).ser(cursor, -128) Squash.print(cursor) -- Pos: 1 / 8 -- Buf: { 128 0 0 0 0 0 0 0 } -- ^ print(Squash.int(1).des(cursor)) -- -128  "},{"title":"Floating Point​","type":1,"pageTitle":"How To Serialize?","url":"/Squash/docs/how#floating-point","content":"Floating Point Numbers are Rational Numbers that can be represented with either 4 or 8 bytes: Q = { ..., -2.0, ..., -1.0, ..., 0.0, ..., 1.0, ..., 2.0, ... } With 4 bytes (called a float), the possible values that can be represented are a bit more complicated. The first bit is used to represent the sign of the number, the next 8 bits are used to represent the exponent, and the last 23 bits are used to represent the mantissa.  The formula for calculating the value of a float from its sign, exponent, and mantissa can be found at this wikipedia article. With 8 bytes (called a double). The first bit is used to represent the sign of the number, the next 11 bits are used to represent the exponent, and the last 52 bits are used to represent the mantissa.  The formula for calculating the value of a double from its sign, exponent, and mantissa can be found at this wikipedia article. local cursor = Squash.cursor() Squash.number(4).ser(cursor, 174302.923957475339573) Squash.print(cursor) -- Pos: 4 / 8 -- Buf: { 187 55 42 72 0 0 0 0 } -- ^ print(Squash.number(4).des(cursor)) -- 174302.921875  local cursor = Squash.cursor() Squash.number(8).ser(cursor, -17534840302.923957475339573) Squash.print(cursor) -- Pos: 8 / 8 -- Buf: { 34 178 187 183 161 84 16 194 } -- ^ print(Squash.number(8).des(cursor)) -- -17534840302.923958  "},{"title":"Variable Length Quantities​","type":1,"pageTitle":"How To Serialize?","url":"/Squash/docs/how#variable-length-quantities","content":"Sometimes we don't know how many bytes we need to represent a number, or we need to represent a number so large that 8 bytes isn't enough. This is where VLQs come in. They are a binary format to represent arbitrarily large numbers as a sequence of bytes. 7 bits encode the number, 1 bit encodes the end of the number. This means 127 serializes to 1 byte. 128 serializes to 2 bytes. It increments by powers of 128 instead of 256 like bytes do because of the missing bit. local cursor = Squash.cursor() Squash.vlq().ser(cursor, 10) Squash.print(cursor) -- Pos: 1 / 8 -- Buf: { 138 0 0 0 0 0 0 0 } -- ^ print(Squash.vlq().des(cursor)) -- 10  local cursor = Squash.cursor() Squash.vlq().ser(cursor, 130) Squash.print(cursor) -- Pos: 2 / 8 -- Buf: { 129 2 0 0 0 0 0 0 } -- ^ print(Squash.vlq().des(cursor)) -- 130  local cursor = Squash.cursor() Squash.vlq().ser(cursor, 547359474) Squash.print(cursor) -- Pos: 5 / 8 -- Buf: { 130 5 0 21 114 0 0 0 } -- ^ print(Squash.vlq().des(cursor)) -- 547359474  "},{"title":"Strings​","type":1,"pageTitle":"How To Serialize?","url":"/Squash/docs/how#strings","content":"Strings are a bit trickier conceptually since they have a variable size. However to serialize with Squash is actually easier than numbers! Every character is a byte, so it is useful to think of strings are arrays of bytes. After writing each character in sequence, we need a mechanism to count how many characters we've serialized else we'll never know when to stop reading when deserializing. Right after the string, the length is serialized as a Variable Length Quantity to use only necessary bytes. local cursor = Squash.cursor() Squash.string().ser(cursor, &quot;Hello, World!&quot;) Squash.print(cursor) -- Pos: 14 / 18 -- Buf: { 72 101 108 108 111 44 32 87 111 114 108 100 33 141 0 0 0 0 } -- ^ print(Squash.string().des(cursor)) -- Hello, World!  local cursor = Squash.cursor() Squash.string(13).ser(cursor, &quot;Hello, World!&quot;) Squash.print(cursor) -- Pos: 13 / 18 -- Buf: { 72 101 108 108 111 44 32 87 111 114 108 100 33 0 0 0 0 0 } -- ^ print(Squash.string(13).des(cursor)) -- Hello, World!  "},{"title":"Using Base Conversion​","type":1,"pageTitle":"How To Serialize?","url":"/Squash/docs/how#using-base-conversion","content":"There are many ways to compress serialized strings, a lossless approach is to treat the string itself as a number and convert the number into a higher base, or radix. This is called base conversion. Strings come in many different flavors though, so we need to know how to serialize each flavor. Each string is composed of a sequence of certain characters. The set of those certain characters is called that string's smallest Alphabet. For example the string &quot;Hello, World!&quot; has the alphabet &quot; !,HWdelorw&quot;. We can assign a number to each character in the alphabet like its position in the string. With our example: { [' '] = 1, ['!'] = 2, [','] = 3, ['H'] = 4, ['W'] = 5, ['d'] = 6, ['e'] = 7, ['l'] = 8, ['o'] = 9, ['r'] = 10, ['w'] = 11, }  This allows us to now calculate a numerical value for each string using Positional Notation. The alphabet above has a radix of 11, so we can convert the string into a number with base 11. We can then use the base conversion formula, modified to work with strings, to convert the number with a radix 11 alphabet into a number with a radix 256 alphabet such as extended ASCII or UTF-8. To prevent our numbers from being shortened due to leading 0's, we have to use an extra character in our alphabet in the 0's place that we never use, such as the \\0 character, making our radix 12. Long story short, you can fit log12(256) = 2.23 characters from the original string into a single character in the new string. This proccess is invertible and lossless, so we can convert the serialized string back into the original string when we are ready. To play with this concept for arbitrary alphabets, you can visit Zamicol's Base Converter which supports these exact operations and comes with many pre-defined alphabets. local x = 'Hello, world!' local alphabet = Squash.string.alphabet(x) print(alphabet) -- !,Hdelorw local y = Squash.string.convert(x, alphabet, Squash.string.utf8) print(y) -- \u0003&gt;q#\u000e� print(Squash.string.convert(y, Squash.string.utf8, alphabet)) -- 'Hello, world!'  local y = Squash.string.convert('great sword', Squash.string.lower .. ' ', Squash.string.utf8) print(y) -- \u0004�zvFV� print(Squash.string.convert(y, Squash.string.utf8, Squash.string.lower .. ' ')) -- 'great sword'  local y = Squash.string.convert('lowercase', Squash.string.lower, Squash.string.upper) print(y) -- LOWERCASE print(Squash.string.convert(y, Squash.string.upper, Squash.string.lower)) -- lowercase  local y = Squash.string.convert('123', Squash.string.decimal, Squash.string.binary) print(y) -- 1111011 print(Squash.string.convert(y, Squash.string.binary, Squash.string.octal)) -- 173 print(Squash.string.convert(y, Squash.string.binary, Squash.string.decimal)) -- 123 print(Squash.string.convert(y, Squash.string.binary, Squash.string.duodecimal)) -- A3 print(Squash.string.convert(y, Squash.string.binary, Squash.string.hexadecimal)) -- 7B print(Squash.string.convert(y, Squash.string.binary, Squash.string.utf8)) -- {  "},{"title":"Literals​","type":1,"pageTitle":"How To Serialize?","url":"/Squash/docs/how#literals","content":"Literals are individual values that can be enumerated and distinguished using just u1s. This is useful for encoding enums of names, orientations, and other unique identifiers with minimal data. local literal = Squash.literal(&quot;a&quot;, 2, &quot;c&quot;, true, &quot;e&quot;) local cursor = Squash.cursor() literal.ser(cursor, &quot;c&quot;) Squash.print(cursor) -- Pos: 1 / 8 -- Buf: { 2 0 0 0 0 0 0 0 } -- ^ print(literal.des(cursor)) -- &quot;c&quot;  "},{"title":"Arrays​","type":1,"pageTitle":"How To Serialize?","url":"/Squash/docs/how#arrays","content":"Arrays are a classic table type {T}. Like strings, which are also arrays (of bytes), after serializing every element in sequence we append a VLQ representing the count. An array can store an array or any other table type. local arr = Squash.array local float = Squash.number(4) local myarr = arr(float) local cursor = Squash.cursor() myarr.ser(cursor, {1, 2, 3, 4, 5.5, 6.6, -7.7, -8.9, 10.01}) Squash.print(cursor) -- Pos: 37 / 40 -- Buf: { 0 0 128 63 0 0 0 64 0 0 64 64 0 0 128 64 0 0 176 64 51 51 211 64 102 102 246 192 102 102 14 193 246 40 32 65 137 0 0 0 } -- ^ print(myarr.des(cursor)) -- 1 2 3 4 5.5 6.599999904632568 -7.699999809265137 -8.899999618530273 10.01000022888184  local arr = Squash.array local float = Squash.number(4) local myarr = arr(float, 8) local cursor = Squash.cursor() myarr.ser(cursor, {1, 2, 3, 4, 5.5, 6.6, -7.7, -8.9, 10.01}) Squash.print(cursor) -- Pos: 32 / 40 -- Buf: { 0 0 128 63 0 0 0 64 0 0 64 64 0 0 128 64 0 0 176 64 51 51 211 64 102 102 246 192 102 102 14 193 0 0 0 0 0 0 0 0 } -- ^ print(myarr.des(cursor)) -- 1 2 3 4 5.5 6.599999904632568 -7.699999809265137 -8.899999618530273  "},{"title":"Maps​","type":1,"pageTitle":"How To Serialize?","url":"/Squash/docs/how#maps","content":"Maps are a classic table type { [T]: U } that map T's to U's. A map can store a map or any other table type. local u = Squash.uint local vec3 = Squash.Vector3 local vec2 = Squash.Vector2 local mymap = Squash.map(vec2(u(2)), vec3(u(3))) local cursor = Squash.cursor() mymap.ser(cursor, { [Vector2.new(1, 2)] = Vector3.new(1, 2, 3), [Vector2.new(4, 29)] = Vector3.new(4, 29, 33), [Vector2.new(72, 483)] = Vector3.new(72, 483, 555), }) Squash.print(cursor) -- Pos: 40 / 40 -- Buf: { 43 2 0 227 1 0 72 0 0 227 1 72 0 33 0 0 29 0 0 4 0 0 29 0 4 0 3 0 0 2 0 0 1 0 0 2 0 1 0 131 } -- ^ print(mymap.des(cursor)) -- { -- [Vector2(24346692898)] = 72, 483, 555, -- [Vector2(243466928B0)] = 4, 29, 33, -- [Vector2(243466928C8)] = 1, 2, 3 -- }  "},{"title":"T​","type":1,"pageTitle":"How To Serialize?","url":"/Squash/docs/how#t","content":"If using the TypeScript port of Squash this is irrelevant, but for Luau users, the type system is not powerful enough to take a table of serializers and infer the correct type. To get around this, the Squash.T function maps SerDes&lt;T&gt; -&gt; T and returns what you give it. It's an identity function that lies about its type. local T = Squash.T typeof(Squash.number(4)) -- SerDes&lt;number&gt; typeof(T(Squash.number(4))) -- number print(Squash.number(4) == T(Squash.number(4))) -- true  "},{"title":"Records​","type":1,"pageTitle":"How To Serialize?","url":"/Squash/docs/how#records","content":"Records (Structs) { prop1: any, prop2: any, ... } map enumerated string identifiers to different values, like a named tuple. Because all keys are string literals known ahead of time, none of them have to be serialized! A record can store a record or any other table type. When defining compound types the code can become verbose and difficult to read. If this is an issue, it is encouraged to store each SerDes in a variable with a shorter name. local T = Squash.T local u = Squash.uint local vlq = Squash.vlq() local bool = Squash.boolean() local str = Squash.string() local float = Squash.number(4) local vec2 = Squash.Vector2 local arr = Squash.array local map = Squash.map local opt = Squash.opt local record = Squash.record local playerserdes = record { position = T(vec2(float)), health = T(u(1)), name = T(str), poisoned = T(bool), items = T(arr(record { count = T(vlq), name = T(str), })), inns = T(map(str, bool)), equipped = T(opt(str)), } local cursor = Squash.cursor() playerserdes.ser(cursor, { position = Vector2.new(287.3855, -13486.3), health = 9, name = &quot;Cedrick&quot;, poisoned = true, items = { { name = 'Lantern', count = 2 }, { name = 'Waterskin', count = 1 }, { name = 'Map', count = 4 }, }, inns = { ['The Copper Cauldron'] = true, Infirmary = true, ['His Recess'] = true, }, equipped = nil, }) Squash.print(cursor) -- Pos: 90 / 90 -- Buf: { 0 9 1 72 105 115 32 82 101 99 101 115 115 138 1 84 104 101 32 67 111 112 112 101 114 32 67 97 117 108 100 114 111 110 147 1 73 110 102 105 114 109 97 114 121 137 131 130 76 97 110 116 101 114 110 135 129 87 97 116 101 114 115 107 105 110 137 132 77 97 112 131 131 67 101 100 114 105 99 107 135 1 51 185 82 198 88 177 143 67 } -- ^ print(playerserdes.des(cursor)) -- { -- [&quot;health&quot;] = 9, -- [&quot;inns&quot;] = ▼ { -- [&quot;His Recess&quot;] = true, -- [&quot;Infirmary&quot;] = true, -- [&quot;The Copper Cauldron&quot;] = true -- }, -- [&quot;items&quot;] = ▼ { -- [1] = ▼ { -- [&quot;count&quot;] = 2, -- [&quot;name&quot;] = &quot;Lantern&quot; -- }, -- [2] = ▼ { -- [&quot;count&quot;] = 1, -- [&quot;name&quot;] = &quot;Waterskin&quot; -- }, -- [3] = ▼ { -- [&quot;count&quot;] = 4, -- [&quot;name&quot;] = &quot;Map&quot; -- } -- }, -- [&quot;name&quot;] = &quot;Cedrick&quot;, -- [&quot;poisoned&quot;] = true, -- [&quot;position&quot;] = 287.385498, -13486.2998 -- }  "},{"title":"Tuples​","type":1,"pageTitle":"How To Serialize?","url":"/Squash/docs/how#tuples","content":"Tuple types (T...) are like arrays but not wrapped in a table, and each element can be a different type. Tuples cannot be used in table types, and cannot be nested in other tuples. local S = Squash local T = S.T local mytuple = S.tuple( T(S.Vector3(S.number(8))), T(S.CFrame(S.int(1))), T(S.BrickColor()), T(S.EnumItem(Enum.HumanoidStateType)) ) local cursor = S.cursor() mytuple.ser(cursor, Vector3.new(123456789, 1, 0), CFrame.new(1, 2, 3), BrickColor.new(93), Enum.HumanoidStateType.Freefall) S.print(cursor) -- Pos: 40 / 40 -- Buf: { 0 0 0 0 0 0 0 0 0 0 0 0 0 0 240 63 0 0 0 96 52 111 157 65 1 0 0 64 64 0 0 0 64 0 0 128 63 194 0 134 } -- ^ print(mytuple.des(cursor)) -- 123456792, 1, 0 1, 2, 3, 1, 0, 0, 0, 1, 0, 0, 0, 1 Medium stone grey Enum.HumanoidStateType.Freefall  "},{"title":"Tables​","type":1,"pageTitle":"How To Serialize?","url":"/Squash/docs/how#tables","content":"Luau tables are extremely versatile data structures that can and do implement every other kind of data structure one can think of. They are too versatile to optimally serialize in the general case, which is why Squash has the previously listed Array, Map, and Record serializers. Only use this serializer if you cannot guarantee the shape of your table beforehand, as it offers less control and worse size reduction. This is the algorithm that Roblox uses when serializing tables because they can't guarantee the shape of the tables users pass. If you do not know the type of your table but you still need to serialize it, then the Squash.table serializer is a last resort. It has to store data for every value, the type of every value, every key, and the type of every key, which makes it significantly larger than the specialized functions. It also does not offer property-specific granularity, instead only letting you map types to serializers for both keys and values alike. local serdes = Squash.table { number = Squash.number(8), string = Squash.string(), boolean = Squash.boolean(), table = Squash.table { CFrame = Squash.CFrame(Squash.number(4)), Vector3 = Squash.Vector3(Squash.int(2)), number = Squash.vlq(), }, } local cursor = Squash.cursor() serdes.ser(cursor, { wow = -5.352345, [23846.4522] = true, [false] = 'Gaming!', ThisWontSerialize = DateTime.now(), [{ CFrame.new(-24.2435, 2, 3), CFrame.new(), Vector3.new(354, -245, -23), [100] = Vector3.zAxis, [Vector3.zero] = 255, }] = { [1] = CFrame.identity, [2] = Vector3.zero, [3] = 256, }, }) Squash.print(cursor) -- Pos: 131 / 135 -- Buf: { 71 97 109 105 110 103 33 135 1 0 2 240 162 175 32 205 104 21 192 0 119 111 119 131 1 1 2 208 68 216 240 156 73 215 64 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 129 0 0 0 0 0 0 0 2 130 0 130 0 0 131 0 131 3 1 0 0 64 64 0 0 0 64 176 242 193 193 1 129 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 130 0 233 255 11 255 98 1 2 131 0 129 127 0 0 0 0 0 0 0 2 1 0 0 0 0 0 2 228 0 133 3 132 0 0 0 0 } -- ^ print(serdes.des(cursor)) -- { -- [&quot;wow&quot;] = -5.352345, -- [23846.4522] = true, -- [Table(24BE4A11A98)] = ▼ { -- [1] = 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, -- [2] = 0, 0, 0, -- [3] = 256 -- }, -- [false] = &quot;Gaming!&quot; -- }  "},{"title":"Benchmarks and Measurements","type":0,"sectionRef":"#","url":"/Squash/docs/benchmarks","content":"","keywords":""},{"title":"Eyeballed Lookup Table​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#eyeballed-lookup-table","content":"Before we had access to the raw binary data, we ran benchmarks! Below is our first attempt at measuring bandwidth. It is an eye-measured median of the incoming kB/s from the Networking window in studio after stabilization. The code is on the server and fires a remote with the Value every task.wait(). Value\tMedian Bandwidth (kB/s)\tNotes\tConclusionsnoise\t±0.02\tNoise from environment and other factors baseline\t0.16 Roblox is constantly sending data in the background ()\t0.85\tTesting if remote event has a cost\tYes (nil)\t0.91\tTesting if nil is the same as void\tNo. (true), (false), ('')\t0.97\tTesting if value changes cost\tNo. Only serialize 2 or more booleans for optimal results ('\\0'), ('a'), ('0')\t1.03\tTesting if value changes cost\tNo. Past this point, it is better to serialize to strings ('aa'), ('', '')\t1.09 (true, false), (false, true), ({true})\t1.10\tTesting if bit-packed. Testing if order changes cost\tNo. No ('aaa'), (Vector2int16.new(-32768, 9274))\t1.16 (true, true, true), ('aaaa'), ('a', 'a'), ({true, true}), ('', '', '')\t1.22\tEmpty string cost measured\tEmpty string cost averages 0.12 KB/s. Separating arguments is costly! ('aaaaa'), (Vector3int16.new(-32768, 9274, 32767))\t1.28 (true, true, true, true)\t1.34 ('aaaaaa')\t1.35 (Vector2.zero), (Vector2.one), (Vector2.new(-32768, 32767))\t1.40\tTesting if value changes cost\tNo ('aaaaaaa'), ('a', 'a', 'a'), (0), (-96495734574.4864)\t1.41\tTesting if value changes cost\tNo (true, true, true, true, true), ('aaaaaaaa')\t1.47\tCharacter cost measured\tCharacter cost averages 0.07 KB/s (true, true, true, true, true, true), ('a', 'a', 'a', 'a')\t1.60 (Vector3.zero), (Vector3.one), (Vector3.new(-2402.39, 938403, 2057492.4953))\t1.66\tTesting if value changes cost\tNo (true, true, true, true, true, true, true), (CFrame.identity), (CFrame.new() + Vector3.new(938, 0, 0))\t1.73 The CFrame's position is always sent ('a', 'a', 'a', 'a', 'a')\t1.79\tCost measured\tString cost averages 0.19 KB/s (true, true, true, true, true, true, true, true)\t1.86\tCost measured\tBoolean cost averages 0.13 KB/s (0, 0)\t1.98 ((CFrame.fromEulerAngles(9, 2, -5.3)), (CFrame.fromEulerAngles(9, 2, -5.3) + Vector3.new(938, 0, 0))\t2.10\tInvestigating if position and rotation are sent separately\tThe rotation is sent separately, and only if it needs to be sent (0, 0, 0)\t2.54\tDang (0, 0, 0, 0)\t3.10\tCost measured\tNumber cost averages 0.56 KB/s. Numbers are expensive! Sad "},{"title":"Main takeaways:​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#main-takeaways","content":"Arguments have overhead! Avoid separating arguments if possible!Numbers are expensive! Avoid sending numbers! Even CFrames can be cheaper.Booleans are cheap! Don't serialize a single boolean. Serialize 2 or more booleans at a time!Strings are cheap! Serialize to strings!Nil takes up space!!! Don't send nils for no reason!!!!!!!! "},{"title":"How Can I Trust These Results?​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#how-can-i-trust-these-results","content":"To now compare these results with the binary data above, we can take the difference between two median rates, and compare them with the theoretical difference in bytes. Sending () has a rate of 0.85 kB/s, and sending ('aa') has a rate of 1.09 kB/s. The difference is 0.24 kB/s. Now to apply theory, the binary suggests that 'aa' uses 1 byte for the type, 1 byte for the length, and 2 bytes for the characters. This means 4 bytes. The rate of these measurements is 60 times a second. This means that the theoretical difference in bytes is 4 Bytes * 60 / second = 240 Bytes / second. This means that the theoretical difference in kB/s is 0.24 kB/s. This is the same as the measured difference in kB/s. This leads us to believe that the binary data is correct, and that the measurements above are accurate as well. This also means the Network Stats window displays Kilobytes instead of Kibibytes. "},{"title":"Proper Benchmarks​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#proper-benchmarks","content":"Below is our second attempt to measure, using different benchmarks that verifies the above table with better accuracy. To generate a JSON file of the test below results you can download this place file and run it in studio. For the json file of this benchmark presented on this page you can download this json file. Just be warned, it will take a few hours to complete. The results are measured using the Stats service's DataRecieveKbps property 2000 times every 1-3 frames once the recieve rate has stabilized. It waits for the recieve rate to plateau at 0.15kb/s before starting the test, then waits 10 seconds to allow the averaged Stats.DataReceiveKbps to plateau at the maximum value before starting the measurements. Then it appends the current Stats.DataReceiveKbps value to an array every 1-3 frames 2000 times. The process is repeated for all the different kinds of data, which takes a while. "},{"title":"How Can I Trust These Results?​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#how-can-i-trust-these-results-1","content":"To compare these results with the binary data above, we can take the difference between two median rates, and compare them with the theoretical difference in bytes. Sending () has a rate of 0.783 kB/s, and sending (7) has a rate of 1.323 kB/s. The difference is 0.540 kB/s. Now to apply theory, the binary suggests that (7) uses 1 byte for the type and 8 bytes for the number. This means 9 Bytes. The rate of these measurements is 60 times a second. This means that the theoretical difference in bytes is 9 Bytes * 60 / second = 540 Bytes / second. This means that the theoretical difference in kB/s is 0.540 kB/s. This is the same as the measured difference in kB/s. This leads us to believe that the binary data is correct, and that the measurements below are accurate as well. This also means that the Stats service displays Kilobytes instead of Kibibytes. "},{"title":"Results​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#results","content":""},{"title":"()","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks##","content":" "},{"title":"('')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#-1","content":" "},{"title":"(true)​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#true","content":" "},{"title":"(false)​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#false","content":" "},{"title":"({})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#-2","content":" "},{"title":"('A')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#a","content":" "},{"title":"(string.char(255))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#stringchar255","content":" "},{"title":"('a')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#a-1","content":" "},{"title":"(string.char(0))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#stringchar0","content":" "},{"title":"({true})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#true-1","content":" "},{"title":"('aa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aa","content":" "},{"title":"(true, false)​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#true-false","content":" "},{"title":"({''})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#-3","content":" "},{"title":"('', '')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#-","content":" "},{"title":"(Vector2int16.new(1, -3))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector2int16new1--3","content":" "},{"title":"(Vector2int16.new(-1, -3))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector2int16new-1--3","content":" "},{"title":"(Vector2int16.new(-1, 3))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector2int16new-1-3","content":" "},{"title":"('aaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaa","content":" "},{"title":"(Vector2int16.new(1, 3))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector2int16new1-3","content":" "},{"title":"(true, false, true)​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#true-false-true","content":" "},{"title":"('aaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaa","content":" "},{"title":"('', '', '')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#--","content":" "},{"title":"({'', ''})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#--1","content":" "},{"title":"({true, false})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#true-false-1","content":" "},{"title":"('a', 'a')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#a-a","content":" "},{"title":"({Vector2int16.new(-1, 3)})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector2int16new-1-3-1","content":" "},{"title":"(Vector3int16.new(1, 3, 5))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector3int16new1-3-5","content":" "},{"title":"(Vector3int16.new(-1, 3, -5))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector3int16new-1-3--5","content":" "},{"title":"(Vector3int16.new(1, -3, 5))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector3int16new1--3-5","content":" "},{"title":"(Vector3int16.new(-1, -3, -5))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector3int16new-1--3--5","content":" "},{"title":"('aaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaa","content":" "},{"title":"({'a', 'a'})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#a-a-1","content":" "},{"title":"('', '', '', '')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#---","content":" "},{"title":"(true, false, true, false)​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#true-false-true-false","content":" "},{"title":"('aaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaa","content":" "},{"title":"({true, false, true})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#true-false-true-1","content":" "},{"title":"({'', '', ''})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#---1","content":" "},{"title":"(Vector2.zero)​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector2zero","content":" "},{"title":"(0)​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#0","content":" "},{"title":"(18375)​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#18375","content":" "},{"title":"({Vector3int16.new(-1, 3, -5)})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector3int16new-1-3--5-1","content":" "},{"title":"(Vector2.new(-1, 2.5))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector2new-1-25","content":" "},{"title":"('a', 'a', 'a')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#a-a-a","content":" "},{"title":"(Vector2.new(-1, -2.73))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector2new-1--273","content":" "},{"title":"('aaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaa","content":" "},{"title":"(-18375)​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#-18375","content":" "},{"title":"(Vector2.new(1, -2))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector2new1--2","content":" "},{"title":"(Vector2.one)​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector2one","content":" "},{"title":"(Vector2.new(1, 2))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector2new1-2","content":" "},{"title":"(Vector2int16.new(-1, 3), Vector2int16.new(-1, 3))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector2int16new-1-3-vector2int16new-1-3","content":" "},{"title":"('aaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaa","content":" "},{"title":"({true, false, true, false})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#true-false-true-false-1","content":" "},{"title":"({'', '', '', ''})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#----1","content":" "},{"title":"('', '', '', '', '')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#----","content":" "},{"title":"(true, false, true, false, true)​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#true-false-true-false-true","content":" "},{"title":"('aaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaa","content":" "},{"title":"({0})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#0-1","content":" "},{"title":"({'a', 'a', 'a'})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#a-a-a-1","content":" "},{"title":"({Vector2.new(1, 2)})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector2new1-2-1","content":" "},{"title":"({Vector2int16.new(-1, 3), Vector2int16.new(-1, 3)})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector2int16new-1-3-vector2int16new-1-3-1","content":" "},{"title":"('', '', '', '', '', '')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#-----","content":" "},{"title":"({'', '', '', '', ''})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#-----1","content":" "},{"title":"('aaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaa","content":" "},{"title":"('a', 'a', 'a', 'a')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#a-a-a-a","content":" "},{"title":"(true, false, true, false, true, false)​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#true-false-true-false-true-false","content":" "},{"title":"({true, false, true, false, true})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#true-false-true-false-true-1","content":" "},{"title":"(Vector3.one)​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector3one","content":" "},{"title":"(Vector3.zero)​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector3zero","content":" "},{"title":"(Vector3.new(1, -2, 3))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector3new1--2-3","content":" "},{"title":"(Vector3.new(1, 2, 3))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector3new1-2-3","content":" "},{"title":"(Vector3.new())​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector3new","content":" "},{"title":"('aaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaa","content":" "},{"title":"(Vector3.new(-1, 2.5, -3.27))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector3new-1-25--327","content":" "},{"title":"(CFrame.identity)​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#cframeidentity","content":" "},{"title":"({true, false, true, false, true, false})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#true-false-true-false-true-false-1","content":" "},{"title":"('', '', '', '', '', '', '')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#------","content":" "},{"title":"('aaaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaaa","content":" "},{"title":"(true, false, true, false, true, false, true)​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#true-false-true-false-true-false-true","content":" "},{"title":"({'', '', '', '', '', ''})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#------1","content":" "},{"title":"(CFrame.new(1, -2, 3))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#cframenew1--2-3","content":" "},{"title":"(CFrame.new(-1, 2.5, -3.27))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#cframenew-1-25--327","content":" "},{"title":"(Vector3int16.new(-1, 3, -5), Vector3int16.new(-1, 3, -5))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector3int16new-1-3--5-vector3int16new-1-3--5","content":" "},{"title":"(CFrame.new(1, 2, 3))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#cframenew1-2-3","content":" "},{"title":"({'a', 'a', 'a', 'a'})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#a-a-a-a-1","content":" "},{"title":"(CFrame.new())​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#cframenew","content":" "},{"title":"('a', 'a', 'a', 'a', 'a')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#a-a-a-a-a","content":" "},{"title":"({Vector3.new(1, 2, 3)})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector3new1-2-3-1","content":" "},{"title":"(Vector2int16.new(-1, 3), Vector2int16.new(-1, 3), Vector2int16.new(-1, 3))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector2int16new-1-3-vector2int16new-1-3-vector2int16new-1-3","content":" "},{"title":"('aaaaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaaaa","content":" "},{"title":"({'', '', '', '', '', '', ''})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#-------1","content":" "},{"title":"('', '', '', '', '', '', '', '')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#-------","content":" "},{"title":"(true, false, true, false, true, false, true, false)​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#true-false-true-false-true-false-true-false","content":" "},{"title":"('aaaaaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaaaaa","content":" "},{"title":"({true, false, true, false, true, false, true})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#true-false-true-false-true-false-true-1","content":" "},{"title":"({CFrame.identity})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#cframeidentity-1","content":" "},{"title":"({Vector3int16.new(-1, 3, -5), Vector3int16.new(-1, 3, -5)})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector3int16new-1-3--5-vector3int16new-1-3--5-1","content":" "},{"title":"({Vector2int16.new(-1, 3), Vector2int16.new(-1, 3), Vector2int16.new(-1, 3)})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector2int16new-1-3-vector2int16new-1-3-vector2int16new-1-3-1","content":" "},{"title":"('aaaaaaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaaaaaa","content":" "},{"title":"({'a', 'a', 'a', 'a', 'a'})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#a-a-a-a-a-1","content":" "},{"title":"(Vector2.new(1, 2), Vector2.new(1, 2))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector2new1-2-vector2new1-2","content":" "},{"title":"('aaaaaaaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaaaaaaa","content":" "},{"title":"(0, 0)​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#0-0","content":" "},{"title":"('', '', '', '', '', '', '', '', '')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#--------","content":" "},{"title":"({true, false, true, false, true, false, true, false})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#true-false-true-false-true-false-true-false-1","content":" "},{"title":"({'', '', '', '', '', '', '', ''})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#--------1","content":" "},{"title":"('a', 'a', 'a', 'a', 'a', 'a')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#a-a-a-a-a-a","content":" "},{"title":"('aaaaaaaaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaaaaaaaa","content":" "},{"title":"(CFrame.fromEulerAnglesYXZ(1, -2, 3))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#cframefromeuleranglesyxz1--2-3","content":" "},{"title":"({Vector2.new(1, 2), Vector2.new(1, 2)})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector2new1-2-vector2new1-2-1","content":" "},{"title":"({0, 0})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#0-0-1","content":" "},{"title":"({'', '', '', '', '', '', '', '', ''})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#---------1","content":" "},{"title":"({'a', 'a', 'a', 'a', 'a', 'a'})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#a-a-a-a-a-a-1","content":" "},{"title":"(CFrame.fromEulerAnglesYXZ(1, 2, 3) + Vector3.new(1, 2, 3))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#cframefromeuleranglesyxz1-2-3--vector3new1-2-3","content":" "},{"title":"(CFrame.fromEulerAnglesYXZ(-1, 2.5, -3.27) + Vector3.new(-1, -2, -3))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#cframefromeuleranglesyxz-1-25--327--vector3new-1--2--3","content":" "},{"title":"(CFrame.fromEulerAnglesYXZ(1, 2, 3))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#cframefromeuleranglesyxz1-2-3","content":" "},{"title":"(CFrame.fromEulerAnglesYXZ(1, -2, 3) + Vector3.new(-1, 2, 3))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#cframefromeuleranglesyxz1--2-3--vector3new-1-2-3","content":" "},{"title":"(CFrame.fromEulerAnglesYXZ(-1, 2.5, -3.27))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#cframefromeuleranglesyxz-1-25--327","content":" "},{"title":"('aaaaaaaaaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaaaaaaaaa","content":" "},{"title":"('aaaaaaaaaaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaaaaaaaaaa","content":" "},{"title":"('a', 'a', 'a', 'a', 'a', 'a', 'a')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#a-a-a-a-a-a-a","content":" "},{"title":"(Vector3int16.new(-1, 3, -5), Vector3int16.new(-1, 3, -5), Vector3int16.new(-1, 3, -5))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector3int16new-1-3--5-vector3int16new-1-3--5-vector3int16new-1-3--5","content":" "},{"title":"({CFrame.fromEulerAnglesYXZ(1, 2, 3)})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#cframefromeuleranglesyxz1-2-3-1","content":" "},{"title":"('aaaaaaaaaaaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaaaaaaaaaaa","content":" "},{"title":"({Vector3int16.new(-1, 3, -5), Vector3int16.new(-1, 3, -5), Vector3int16.new(-1, 3, -5)})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector3int16new-1-3--5-vector3int16new-1-3--5-vector3int16new-1-3--5-1","content":" "},{"title":"({'a', 'a', 'a', 'a', 'a', 'a', 'a'})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#a-a-a-a-a-a-a-1","content":" "},{"title":"('aaaaaaaaaaaaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaaaaaaaaaaaa","content":" "},{"title":"('a', 'a', 'a', 'a', 'a', 'a', 'a', 'a')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#a-a-a-a-a-a-a-a","content":" "},{"title":"('aaaaaaaaaaaaaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaaaaaaaaaaaaa","content":" "},{"title":"('aaaaaaaaaaaaaaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaaaaaaaaaaaaaa","content":" "},{"title":"(Vector3.new(1, 2, 3), Vector3.new(1, 2, 3))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector3new1-2-3-vector3new1-2-3","content":" "},{"title":"({'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#a-a-a-a-a-a-a-a-1","content":" "},{"title":"('aaaaaaaaaaaaaaaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaaaaaaaaaaaaaaa","content":" "},{"title":"(Vector2.new(1, 2), Vector2.new(1, 2), Vector2.new(1, 2))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector2new1-2-vector2new1-2-vector2new1-2","content":" "},{"title":"('aaaaaaaaaaaaaaaaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaaaaaaaaaaaaaaaa","content":" "},{"title":"(0, 0, 0)​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#0-0-0","content":" "},{"title":"(CFrame.new(), CFrame.new())​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#cframenew-cframenew","content":" "},{"title":"('aaaaaaaaaaaaaaaaaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaaaaaaaaaaaaaaaaa","content":" "},{"title":"({Vector3.new(1, 2, 3), Vector3.new(1, 2, 3)})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector3new1-2-3-vector3new1-2-3-1","content":" "},{"title":"({0, 0, 0})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#0-0-0-1","content":" "},{"title":"('aaaaaaaaaaaaaaaaaaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaaaaaaaaaaaaaaaaaa","content":" "},{"title":"({Vector2.new(1, 2), Vector2.new(1, 2), Vector2.new(1, 2)})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector2new1-2-vector2new1-2-vector2new1-2-1","content":" "},{"title":"('aaaaaaaaaaaaaaaaaaaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaaaaaaaaaaaaaaaaaaa","content":" "},{"title":"({CFrame.identity, CFrame.identity})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#cframeidentity-cframeidentity","content":" "},{"title":"('aaaaaaaaaaaaaaaaaaaaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaaaaaaaaaaaaaaaaaaaa","content":" "},{"title":"('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","content":" "},{"title":"('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","content":" "},{"title":"('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","content":" "},{"title":"('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","content":" "},{"title":"('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","content":" "},{"title":"(0, 0, 0, 0)​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#0-0-0-0","content":" "},{"title":"('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","content":" "},{"title":"({0, 0, 0, 0})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#0-0-0-0-1","content":" "},{"title":"('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","content":" "},{"title":"('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","content":" "},{"title":"(Vector3.new(1, 2, 3), Vector3.new(1, 2, 3), Vector3.new(1, 2, 3))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector3new1-2-3-vector3new1-2-3-vector3new1-2-3","content":" "},{"title":"(CFrame.fromEulerAnglesYXZ(1, 2, 3), CFrame.fromEulerAnglesYXZ(1, 2, 3))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#cframefromeuleranglesyxz1-2-3-cframefromeuleranglesyxz1-2-3","content":" "},{"title":"(CFrame.fromEulerAnglesYXZ(1, 2, 3) + Vector3.new(1, 2, 3), CFrame.fromEulerAnglesYXZ(1, 2, 3) + Vector3.new(1, 2, 3))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#cframefromeuleranglesyxz1-2-3--vector3new1-2-3-cframefromeuleranglesyxz1-2-3--vector3new1-2-3","content":" "},{"title":"('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","content":" "},{"title":"('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","content":" "},{"title":"({Vector3.new(1, 2, 3), Vector3.new(1, 2, 3), Vector3.new(1, 2, 3)})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#vector3new1-2-3-vector3new1-2-3-vector3new1-2-3-1","content":" "},{"title":"('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","content":" "},{"title":"({CFrame.fromEulerAnglesYXZ(1, 2, 3), CFrame.fromEulerAnglesYXZ(1, 2, 3)})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#cframefromeuleranglesyxz1-2-3-cframefromeuleranglesyxz1-2-3-1","content":" "},{"title":"(CFrame.new(), CFrame.new(), CFrame.new())​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#cframenew-cframenew-cframenew","content":" "},{"title":"('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","content":" "},{"title":"('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","content":" "},{"title":"({CFrame.identity, CFrame.identity, CFrame.identity})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#cframeidentity-cframeidentity-cframeidentity","content":" "},{"title":"(0, 0, 0, 0, 0)​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#0-0-0-0-0","content":" "},{"title":"('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","content":" "},{"title":"('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","content":" "},{"title":"('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","content":" "},{"title":"({0, 0, 0, 0, 0})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#0-0-0-0-0-1","content":" "},{"title":"('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","content":" "},{"title":"('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","content":" "},{"title":"('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","content":" "},{"title":"(0, 0, 0, 0, 0, 0)​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#0-0-0-0-0-0","content":" "},{"title":"({0, 0, 0, 0, 0, 0})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#0-0-0-0-0-0-1","content":" "},{"title":"(CFrame.fromEulerAnglesYXZ(1, 2, 3), CFrame.fromEulerAnglesYXZ(1, 2, 3), CFrame.fromEulerAnglesYXZ(1, 2, 3))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#cframefromeuleranglesyxz1-2-3-cframefromeuleranglesyxz1-2-3-cframefromeuleranglesyxz1-2-3","content":" "},{"title":"(CFrame.fromEulerAnglesYXZ(1, 2, 3) + Vector3.new(1, 2, 3), CFrame.fromEulerAnglesYXZ(1, 2, 3) + Vector3.new(1, 2, 3), CFrame.fromEulerAnglesYXZ(1, 2, 3) + Vector3.new(1, 2, 3))​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#cframefromeuleranglesyxz1-2-3--vector3new1-2-3-cframefromeuleranglesyxz1-2-3--vector3new1-2-3-cframefromeuleranglesyxz1-2-3--vector3new1-2-3","content":" "},{"title":"({CFrame.fromEulerAnglesYXZ(1, 2, 3), CFrame.fromEulerAnglesYXZ(1, 2, 3), CFrame.fromEulerAnglesYXZ(1, 2, 3)})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#cframefromeuleranglesyxz1-2-3-cframefromeuleranglesyxz1-2-3-cframefromeuleranglesyxz1-2-3-1","content":" "},{"title":"(0, 0, 0, 0, 0, 0, 0)​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#0-0-0-0-0-0-0","content":" "},{"title":"({0, 0, 0, 0, 0, 0, 0})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#0-0-0-0-0-0-0-1","content":" "},{"title":"(0, 0, 0, 0, 0, 0, 0, 0)​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#0-0-0-0-0-0-0-0","content":" "},{"title":"({0, 0, 0, 0, 0, 0, 0, 0})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#0-0-0-0-0-0-0-0-1","content":" "},{"title":"(0, 0, 0, 0, 0, 0, 0, 0, 0)​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#0-0-0-0-0-0-0-0-0","content":" "},{"title":"({0, 0, 0, 0, 0, 0, 0, 0, 0})​","type":1,"pageTitle":"Benchmarks and Measurements","url":"/Squash/docs/benchmarks#0-0-0-0-0-0-0-0-0-1","content":" "}]